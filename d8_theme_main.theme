<?php
require_once('modules/contrib/devel/kint/kint/Kint.class.php');
/**
 * @file
 * Functions to support theming in the Pattern Lab theme.
 */

// storing img_blockname in attributes so that I can pass it on
function d8_theme_main_preprocess_responsive_image_formatter(&$variables) {
  if (isset($variables['item'])){
    $itemParent = $variables['item']->getParent();
    $fieldName = $itemParent->getName();
    $fieldNameBundle = $itemParent->getFieldDefinition()->getType();
    $variables['responsive_image']['#attributes']['field_info']['field_name'] = $fieldName;
    $variables['responsive_image']['#attributes']['field_info']['field_name_bundle'] = $fieldNameBundle;

    $fieldParent = $variables['item']->getEntity();
    $fieldParentBundle = $fieldParent->bundle();

    $fieldParentBundleType = $fieldParent->getEntityTypeId();
    $variables['responsive_image']['#attributes']['field_info']['field_parent_bundle'] = $fieldParentBundle;
    $variables['responsive_image']['#attributes']['field_info']['field_parent_bundle_type'] = $fieldParentBundleType;
  }

  if (isset($variables['url'])) {
    $variables['responsive_image']['#attributes']['img_blockname'] = "link";
  }
}

// fixes bug where style_name is never set
 function d8_theme_main_preprocess_responsive_image(&$variables) {
   if (isset($variables['responsive_image_style_id'])) {
     $variables['img_element']['#style_name'] = $variables['responsive_image_style_id'];
   }
 }

// retrieving img_blockname from attributes so that it can be used in the BEM class
// then unsetting it so it doesn't display as an attribute
function d8_theme_main_preprocess_image(&$variables) {

  if (isset($variables['attributes']['img_blockname'])) {
    $variables['img_blockname'] = implode($variables['attributes']['img_blockname']);
    unset($variables['attributes']['img_blockname']);
  }

  if (isset($variables['attributes']['field_info'])) {
    unset($variables['attributes']['field_info']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
 function d8_theme_main_theme_suggestions_responsive_image_formatter_alter(array &$suggestions, array $variables) {

   $itemParent = $variables['item']->getParent();

   $fieldName = $itemParent->getName();
   $fieldNameBundle = $itemParent->getFieldDefinition()->getType();

   $fieldParent = $variables['item']->getEntity();
   $fieldParentBundle = $fieldParent->bundle();

   $fieldParentBundleType = $fieldParent->getEntityTypeId();

   array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType);
   array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldParentBundle);
   array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldName);
   array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldName . "__" . $fieldParentBundle);

 }
function d8_theme_main_theme_suggestions_image_alter(array &$suggestions, array $variables) {

  $fieldParentBundle = $variables['attributes']['field_info']['field_parent_bundle'];
  $fieldParentBundleType = $variables['attributes']['field_info']['field_parent_bundle_type'];
  $fieldName = $variables['attributes']['field_info']['field_name'];
  $fieldNameBundle = $variables['attributes']['field_info']['field_name_bundle'];

  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType);
  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldParentBundle);
  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldName);
  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldName . "__" . $fieldParentBundle);

}


function d8_theme_main_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  $sanitized_view_mode = strtr($element['#view_mode'], '.', '_');

  array_push($suggestions, 'field__' . $element['#entity_type'] . '__' . $element['#field_name'] . '__' . $sanitized_view_mode);
  array_push($suggestions, 'field__' . $element['#entity_type'] . '__' . $element['#field_name'] . '__' . $element['#bundle'] . '__' . $sanitized_view_mode);
}


// **** Adding theme suggestions to forms and form submit items
function d8_theme_main_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['actions']['submit']['#attributes']['data-twig-suggestion'] = $form['#form_id'];
  $form['keys']['#attributes']['data-twig-suggestion'] = $form['#form_id'];
}

function d8_theme_main_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // convert the very specific #id to underscores only for use in suggestion
  $form_id = str_replace('-', '_', $form['#id']);
  $form['actions']['submit']['#attributes']['data-twig-suggestion'] = $form_id;
  $form['s']['#attributes']['data-twig-suggestion'] = $form_id;
}

function d8_theme_main_theme_suggestions_form_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  $suggestions[] = 'form__' . $element['#form_id']; // Machine name of form.

  // checks if the form_id isn't specific enough -- for example with form for a
  // views exposed form
  $alternate_form_id = str_replace('-', '_', $element['#id']);
  if ($element['#form_id'] != $alternate_form_id) {
    $suggestions[] = 'form__' . $alternate_form_id;
  }
}

function d8_theme_main_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = 'input__' . $element['#type'] . '__' . $element['#attributes']['data-twig-suggestion'];
  }
}
// ******************

/**
 * Implements hook_theme_registry_alter().
 * @param $theme_registry
 */
function d8_theme_main_theme_registry_alter(&$theme_registry) {
  $theme_registry['menu']['variables']['top_parent'] = "TEST";
}

function d8_theme_main_preprocess_breadcrumb(&$variables) {
  if (($node = \Drupal::routeMatch()->getParameter('node')) && $variables['breadcrumb']) {
    $title = $node->getTitle();
    $path = \Drupal::service('path.current')->getPath();

    foreach ($variables['breadcrumb'] as $key => $value) {
      if ($variables['breadcrumb'][$key]['url'] == $path) {
        $variables['breadcrumb'][$key]['text'] = $title;
      }
    }
  }
}

function d8_theme_main_preprocess_field(&$variables) {
  //get the value of the field

  $parent_entity = $variables['element']['#object'];

  if ($parent_entity->hasField('field_txex_ref_content_01')) {
    if (!$parent_entity->get('field_txex_ref_content_01')->isEmpty()) {

      $reference_field = $parent_entity->get('field_txex_ref_content_01')->first();
      $referenced_entity = $reference_field->getValue();
      $loaded_entity = \Drupal\node\Entity\Node::load($referenced_entity['target_id']);

      if ($loaded_entity->hasField('field_txex_text_list_08')) {
        if (!$loaded_entity->get('field_txex_text_list_08')->isEmpty()){
          $field_layout_type = $loaded_entity->get('field_txex_text_list_08')->first()->getValue();
          $field_layout_type_value = $field_layout_type['value'];
        }
      }

      $field_modifiers = [];

      if ($loaded_entity->hasField('field_txex_text_list_07')) {
        if (!$loaded_entity->get('field_txex_text_list_07')->isEmpty()) {
          $field_text_type = $loaded_entity->get('field_txex_text_list_07')->first()->getValue();
          $field_text_type_value = $field_text_type['value'];
          $field_modifiers = $field_modifiers + array($field_text_type_value => $field_text_type_value);
        }
      }

      $variables['field_blockname'] = $field_layout_type_value;
      $variables['field_modifiers'] = $field_modifiers;
    }
  }
}

// function d8_theme_main_preprocess_paragraph__txex_paragraph_02(&$variables) {
function d8_theme_main_preprocess_paragraph(&$variables) {

  $current_paragraph = $variables['elements']['#paragraph'];
  $paragraph_modifiers = [];

  if ($variables['elements']['field_txex_ref_content_01']) {
    $reference_field = $current_paragraph->get('field_txex_ref_content_01')->first();

    if ($reference_field) {
      $paragraph_layout_type_value = "";

      $referenced_entity = $reference_field->getValue();
      $loaded_entity = \Drupal\node\Entity\Node::load($referenced_entity['target_id']);

      if ($loaded_entity->get('field_txex_text_list_02')->getValue()) {
        $paragraph_layout_type = $loaded_entity->get('field_txex_text_list_02')->first()->getValue();
        $paragraph_layout_type_value = $paragraph_layout_type['value'];
      }

      if ($loaded_entity->get('field_txex_text_list_03')->getValue()) {
        $paragraph_box_layout = $loaded_entity->get('field_txex_text_list_03')->first()->getValue();
        $paragraph_box_layout_value = $paragraph_box_layout['value'];
        $paragraph_modifiers = $paragraph_modifiers + array($paragraph_box_layout_value => $paragraph_box_layout_value);
      }

      if ($loaded_entity->get('field_txex_text_list_04')->getValue()) {
        $paragraph_background = $loaded_entity->get('field_txex_text_list_04')->first()->getValue();
        $paragraph_background_value = $paragraph_background['value'];
        $paragraph_modifiers = $paragraph_modifiers + array($paragraph_background_value => $paragraph_background_value);
      }

      if ($loaded_entity->get('field_txex_text_list_05')->getValue()) {
        $paragraph_layout_orientation = $loaded_entity->get('field_txex_text_list_05')->first()->getValue();
        $paragraph_layout_orientation_value = $paragraph_layout_orientation['value'];
        $paragraph_modifiers = $paragraph_modifiers + array($paragraph_layout_orientation_value => $paragraph_layout_orientation_value);
      }

      if ($loaded_entity->get('field_txex_text_list_06')->getValue()) {
        $paragraph_layout_width = $loaded_entity->get('field_txex_text_list_06')->first()->getValue();
        $paragraph_layout_width_value = $paragraph_layout_width['value'];
        $paragraph_modifiers = $paragraph_modifiers + array($paragraph_layout_width_value => $paragraph_layout_width_value);
      }

      if ($loaded_entity->get('field_txex_text_list_09')->getValue()) {
        $paragraph_item_box_layout = $loaded_entity->get('field_txex_text_list_09')->first()->getValue();
        $paragraph_item_box_layout_value = $paragraph_item_box_layout['value'];
        $paragraph_modifiers = $paragraph_modifiers + array($paragraph_item_box_layout_value => $paragraph_item_box_layout_value);
      }

      if ($loaded_entity->get('field_txex_text_list_10')->getValue()) {
        $paragraph_item_box_layout = $loaded_entity->get('field_txex_text_list_10')->first()->getValue();
        $paragraph_item_box_layout_value = $paragraph_item_box_layout['value'];
        $paragraph_modifiers = $paragraph_modifiers + array($paragraph_item_box_layout_value => $paragraph_item_box_layout_value);
      }

      $variables['paragraph_base_class'] = $paragraph_layout_type_value;
    }
  }

  if ($current_paragraph->hasField('field_txex_boolean_01')) {
    if ($current_paragraph->get('field_txex_boolean_01')->getValue()) {
      $paragraph_reverse_order = $current_paragraph->get('field_txex_boolean_01')->first()->getValue();
      if ($paragraph_reverse_order['value']) {
        $paragraph_modifiers = $paragraph_modifiers + array('reverse-order' => 'reverse-order');
      }
    }
  }

  $variables['paragraph_modifiers'] = $paragraph_modifiers;

}



// function d8_theme_main_preprocess_paragraph__txex_paragraph_21(&$variables) {
//   $current_paragraph = $variables['elements']['#paragraph'];
//
//   // if ($variables['elements']['field_txex_ref_rev_para_01']) {
//   if ($current_paragraph->hasField('field_txex_ref_rev_para_01')) {
//     $referenced_paragraphs = $current_paragraph->get('field_txex_ref_rev_para_01')->getValue();
//
//     foreach ( $referenced_paragraphs as $key => $element ) {
//       $loaded_child_paragraph = \Drupal\paragraphs\Entity\Paragraph::load( $element['target_id'] );
//
//       if ($loaded_child_paragraph->hasField('field_txex_ref_content_01')) {
//           $node_reference_field = $loaded_child_paragraph->get('field_txex_ref_content_01')->first();
//
//         if ($node_reference_field) {
//           $referenced_entity = $node_reference_field->getValue();
//           $loaded_entity = \Drupal\node\Entity\Node::load($referenced_entity['target_id']);
//
//           if ($loaded_entity->hasField('field_txex_ref_view_mode')) {
//             if (!empty($loaded_entity->get('field_txex_ref_view_mode')->first())) {
//               $paragraph_view_mode = $loaded_entity->get('field_txex_ref_view_mode')->first()->getValue();
//               $paragraph_view_mode_value = $paragraph_view_mode['target_id'];
//               $paragraph_view_mode_value = explode('.', $paragraph_view_mode_value, 2)[1];
//               $variables['content']['field_txex_ref_rev_para_01'][$key]['#view_mode'] = $paragraph_view_mode_value;
//             }
//           }
//         }
//       }
//     }
//   }
// }

// function d8_theme_main_preprocess_paragraph__txex_paragraph_22(&$variables) {
//   $current_paragraph = $variables['elements']['#paragraph'];
//
//   // if ($variables['elements']['field_txex_ref_rev_para_01']) {
//
// }

// function d8_theme_main_entity_view_mode_alter(&$view_mode, Drupal\Core\Entity\EntityInterface $entity, $context) {
//   kint($entity);
// kint($entity->getEntityTypeId());
// kint($entity->bundle());
//   // if ($entity->getEntityTypeId() == 'txex_paragraph_02' && $entity->bundle() == 'paragraph') {
//   //   $view_mode = 'para_view_mode_01';
//   // }
// }

// function d8_theme_main_entity_view_mode_alter(&$view_mode, Drupal\Core\Entity\EntityInterface $entity, $context) {
//
//   // For nodes, change the view mode when it is teaser.
//   if ($entity
//     ->getEntityTypeId() == 'node' && $view_mode == 'teaser') {
//     $view_mode = 'my_custom_view_mode';
//   }
// }

function d8_theme_main_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
    // If you want you can add a template suggestion for all views
    // based on their ID:
    $suggestions[] = sprintf('views_view__%s', $variables['view']->id());

    // Or you can check the ID, add suggestions, do whatever you want
    // ...
}

// function d8_theme_main_views_pre_render(Drupal\views\ViewExecutable $view) {
//   if ($view->id() == "txex_events" && $view->current_display == 'block_1') {
//     // kint($view);
//     // kint($view->args[0]);
//     // kint($view->field['rendered_entity']->options['view_mode']);
//     // $view->field['rendered_entity']->options['view_mode'] = 'node_view_mode_01';
//     foreach ($view->result as &$row) {
//       // kint($row);
//       $gid = $row->groups_field_data_group_content_field_data_id;
//       $entity = $row->_entity;
//       // kint($entity);
//       // kint($entity);
//       // kint($entity->get('field_txex_ref_rev_para_01'));
//
//       // $field = 'field_txex_ref_group_01';
//       // $entity->set($field, $gid);
//     }
//   }
// }

// function d8_theme_main_node_create(\Drupal\Core\Entity\EntityInterface $entity) {
//
//   kint($entity);
// }
