<?php
require_once('modules/contrib/devel/kint/kint/Kint.class.php');

use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
/**
 * @file
 * Functions to support theming in the Pattern Lab theme.
 */

// storing img_blockname in attributes so that I can pass it on
function d8_theme_main_preprocess_responsive_image_formatter(&$variables) {
  if (isset($variables['item'])){
    $itemParent = $variables['item']->getParent();
    $fieldName = $itemParent->getName();
    $fieldNameBundle = $itemParent->getFieldDefinition()->getType();
    $variables['responsive_image']['#attributes']['field_info']['field_name'] = $fieldName;
    $variables['responsive_image']['#attributes']['field_info']['field_name_bundle'] = $fieldNameBundle;

    $fieldParent = $variables['item']->getEntity();
    $fieldParentBundle = $fieldParent->bundle();

    $fieldParentBundleType = $fieldParent->getEntityTypeId();
    $variables['responsive_image']['#attributes']['field_info']['field_parent_bundle'] = $fieldParentBundle;
    $variables['responsive_image']['#attributes']['field_info']['field_parent_bundle_type'] = $fieldParentBundleType;
  }

  if (isset($variables['url'])) {
    $variables['responsive_image']['#attributes']['img_blockname'] = "link";
  }
}

// fixes bug where style_name is never set
 function d8_theme_main_preprocess_responsive_image(&$variables) {
   if (isset($variables['responsive_image_style_id'])) {
     $variables['img_element']['#style_name'] = $variables['responsive_image_style_id'];
   }
 }

// retrieving img_blockname from attributes so that it can be used in the BEM class
// then unsetting it so it doesn't display as an attribute
function d8_theme_main_preprocess_image(&$variables) {

  if (isset($variables['attributes']['img_blockname'])) {
    $variables['img_blockname'] = implode($variables['attributes']['img_blockname']);
    unset($variables['attributes']['img_blockname']);
  }

  if (isset($variables['attributes']['field_info'])) {
    unset($variables['attributes']['field_info']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
 function d8_theme_main_theme_suggestions_responsive_image_formatter_alter(array &$suggestions, array $variables) {

   $itemParent = $variables['item']->getParent();

   $fieldName = $itemParent->getName();
   $fieldNameBundle = $itemParent->getFieldDefinition()->getType();

   $fieldParent = $variables['item']->getEntity();
   $fieldParentBundle = $fieldParent->bundle();

   $fieldParentBundleType = $fieldParent->getEntityTypeId();

   array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType);
   array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldParentBundle);
   array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldName);
   array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldName . "__" . $fieldParentBundle);

}

function d8_theme_main_theme_suggestions_image_alter(array &$suggestions, array $variables) {
  $fieldParentBundle = NULL;
  $fieldParentBundleType = NULL;
  $fieldName = NULL;
  $fieldNameBundle = NULL;

  if (isset($variables['attributes']['field_info']['field_parent_bundle'])) {
    $fieldParentBundle = $variables['attributes']['field_info']['field_parent_bundle'];
  }

  if (isset($variables['attributes']['field_info']['field_parent_bundle_type'])) {
    $fieldParentBundleType = $variables['attributes']['field_info']['field_parent_bundle_type'];
  }

  if (isset($variables['attributes']['field_info']['field_name'])) {
    $fieldName = $variables['attributes']['field_info']['field_name'];
  }

  if (isset($variables['attributes']['field_info']['field_name_bundle'])) {
    $fieldNameBundle = $variables['attributes']['field_info']['field_name_bundle'];
  }

  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType);
  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldParentBundle);
  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldName);
  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldName . "__" . $fieldParentBundle);
}


function d8_theme_main_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  $sanitized_view_mode = strtr($element['#view_mode'], '.', '_');

  array_push($suggestions, 'field__' . $element['#entity_type'] . '__' . $element['#field_name'] . '__' . $sanitized_view_mode);
  array_push($suggestions, 'field__' . $element['#entity_type'] . '__' . $element['#field_name'] . '__' . $element['#bundle'] . '__' . $sanitized_view_mode);
}

function d8_theme_main_theme_suggestions_taxonomy_term_alter(array &$suggestions, &$variables) {
  $element = $variables['elements'];
  $sanitized_view_mode = strtr($element['#view_mode'], '.', '_');

  array_push($suggestions, $variables['theme_hook_original'] . '__' . $element['name']['#bundle'] . '__'  . $sanitized_view_mode);
}


// **** Adding theme suggestions to forms and form submit items
function d8_theme_main_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_id = str_replace('-', '_', $form['#id']);
  foreach (Drupal\Core\Render\Element::children($form) as $child_group) {
    $form[$child_group]['#attributes']['data-twig-suggestion'] = $form_id;
    foreach (Drupal\Core\Render\Element::children($form[$child_group]) as $child) {
      $form[$child_group][$child]['#attributes']['data-twig-suggestion'] = $form_id;
    }
  }
}

function d8_theme_main_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_id = str_replace('-', '_', $form['#id']);
  $form['actions']['submit']['#attributes']['data-twig-suggestion'] = $form_id;
  foreach (Drupal\Core\Render\Element::children($form) as $child) {
    $form[$child]['#attributes']['data-twig-suggestion'] = $form_id;
  }
}

function d8_theme_main_theme_suggestions_form_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  $form_id = str_replace('-', '_', $element['#form_id']);
  $suggestions[] = $variables['theme_hook_original'] . "__" . $form_id; // Machine name of form.

  // checks if the form_id isn't specific enough -- for example with form for a
  // views exposed form
  $alternate_form_id = str_replace('-', '_', $element['#id']);
  if ($form_id != $alternate_form_id) {
    $suggestions[] = $variables['theme_hook_original'] . "__" . $alternate_form_id;
  }
}

function d8_theme_main_theme_suggestions_form_element_alter(array &$suggestions, array $variables, $hook) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = $variables['theme_hook_original'] . "__" . $element['#type'];
    $suggestions[] = $variables['theme_hook_original'] . "__" . $element['#attributes']['data-twig-suggestion'];
    $suggestions[] = $variables['theme_hook_original'] . "__" . $element['#type'] . '__' . $element['#attributes']['data-twig-suggestion'];
  }
}

function d8_theme_main_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = $variables['theme_hook_original'] . "__" . $element['#attributes']['data-twig-suggestion'];
  }
}

// haven't figured out how to pass data-twig-suggestion to this one yet
// function d8_theme_main_theme_suggestions_form_element_label_alter(&$suggestions, array $variables) {
//   $element = $variables['element'];
//   if (isset($element['#attributes']['data-twig-suggestion'])) {
//     $suggestions[] = $variables['theme_hook_original'] . "__" . $element['#type'];
//     $suggestions[] = $variables['theme_hook_original'] . "__" . $element['#attributes']['data-twig-suggestion'];
//     $suggestions[] = $variables['theme_hook_original'] . "__" . $element['#type'] . '__' . $element['#attributes']['data-twig-suggestion'];
//   }
// }
// ******************

/**
 * Implements hook_theme_registry_alter().
 * @param $theme_registry
 */
function d8_theme_main_theme_registry_alter(&$theme_registry) {
  $theme_registry['menu']['variables']['top_parent'] = "TEST";
}

function d8_theme_main_preprocess_breadcrumb(&$variables) {
  if (($node = \Drupal::routeMatch()->getParameter('node')) && $variables['breadcrumb']) {
    $title = $node->getTitle();
    $path = \Drupal::service('path.current')->getPath();

    foreach ($variables['breadcrumb'] as $key => $value) {
      if ($variables['breadcrumb'][$key]['url'] == $path) {
        $variables['breadcrumb'][$key]['text'] = $title;
      }
    }
  }
}

function d8_theme_main_preprocess_field(&$variables) {
  //get the value of the field
  $element = $variables['element'];
  $field_layout_type_value = NULL;
  $field_modifiers = NULL;
  $parent_entity = $element['#object'];

  if ($parent_entity->hasField('field_txex_ref_content_01')) {
    if (!$parent_entity->get('field_txex_ref_content_01')->isEmpty()) {

      $reference_field = $parent_entity->get('field_txex_ref_content_01')->first();
      $referenced_entity = $reference_field->getValue();
      $loaded_entity = \Drupal\node\Entity\Node::load($referenced_entity['target_id']);
      if (isset($loaded_entity)) {
        if ($loaded_entity->hasField('field_txex_text_list_08')) {
          if (!$loaded_entity->get('field_txex_text_list_08')->isEmpty()){
            $field_layout_type = $loaded_entity->get('field_txex_text_list_08')->first()->getValue();
            $field_layout_type_value = $field_layout_type['value'];
          }
        }

        $field_modifiers = [];

        if ($loaded_entity->hasField('field_txex_text_list_07')) {
          if (!$loaded_entity->get('field_txex_text_list_07')->isEmpty()) {
            $field_text_type = $loaded_entity->get('field_txex_text_list_07')->first()->getValue();
            $field_text_type_value = $field_text_type['value'];
            $field_modifiers = $field_modifiers + array($field_text_type_value => $field_text_type_value);
          }
        }
      }

      $variables['field_blockname'] = $field_layout_type_value;
      $variables['field_modifiers'] = $field_modifiers;
    }
  }
}

// function d8_theme_main_preprocess_paragraph__txex_paragraph_02(&$variables) {
function d8_theme_main_preprocess_paragraph(&$variables) {

  $current_paragraph = $variables['elements']['#paragraph'];
  $paragraph_modifiers = [];

  if (!empty($current_paragraph->field_txex_ref_content_01)) {
    $reference_field = $current_paragraph->get('field_txex_ref_content_01')->first();

    if ($reference_field) {
      $paragraph_layout_type_value = "";

      $referenced_entity = $reference_field->getValue();
      $loaded_entity = \Drupal\node\Entity\Node::load($referenced_entity['target_id']);

      if (isset($loaded_entity)) {
        if ($loaded_entity->hasField('field_txex_text_list_02')) {
          if (!$loaded_entity->get('field_txex_text_list_02')->isEmpty()) {
            $paragraph_layout_type = $loaded_entity->get('field_txex_text_list_02')->first()->getValue();
            $paragraph_layout_type_value = $paragraph_layout_type['value'];
          }
        }

        if ($loaded_entity->hasField('field_txex_text_list_03')) {
          if (!$loaded_entity->get('field_txex_text_list_03')->isEmpty()) {
            $paragraph_box_layout = $loaded_entity->get('field_txex_text_list_03')->first()->getValue();
            $paragraph_box_layout_value = $paragraph_box_layout['value'];
            $paragraph_modifiers = $paragraph_modifiers + array($paragraph_box_layout_value => $paragraph_box_layout_value);
          }
        }

        if ($loaded_entity->hasField('field_txex_text_list_04')) {
          if (!$loaded_entity->get('field_txex_text_list_04')->isEmpty()) {
            $paragraph_background = $loaded_entity->get('field_txex_text_list_04')->first()->getValue();
            $paragraph_background_value = $paragraph_background['value'];
            $paragraph_modifiers = $paragraph_modifiers + array($paragraph_background_value => $paragraph_background_value);
          }
        }

        if ($loaded_entity->hasField('field_txex_text_list_05')) {
          if (!$loaded_entity->get('field_txex_text_list_05')->isEmpty()) {
            $paragraph_layout_orientation = $loaded_entity->get('field_txex_text_list_05')->first()->getValue();
            $paragraph_layout_orientation_value = $paragraph_layout_orientation['value'];
            $paragraph_modifiers = $paragraph_modifiers + array($paragraph_layout_orientation_value => $paragraph_layout_orientation_value);
          }
        }

        if ($loaded_entity->hasField('field_txex_text_list_06')) {
          if (!$loaded_entity->get('field_txex_text_list_06')->isEmpty()) {
            $paragraph_layout_width = $loaded_entity->get('field_txex_text_list_06')->first()->getValue();
            $paragraph_layout_width_value = $paragraph_layout_width['value'];
            $paragraph_modifiers = $paragraph_modifiers + array($paragraph_layout_width_value => $paragraph_layout_width_value);
          }
        }

        if ($loaded_entity->hasField('field_txex_text_list_09')) {
          if (!$loaded_entity->get('field_txex_text_list_09')->isEmpty()) {
            $paragraph_item_box_layout = $loaded_entity->get('field_txex_text_list_09')->first()->getValue();
            $paragraph_item_box_layout_value = $paragraph_item_box_layout['value'];
            $paragraph_modifiers = $paragraph_modifiers + array($paragraph_item_box_layout_value => $paragraph_item_box_layout_value);
          }
        }

        if ($loaded_entity->hasField('field_txex_text_list_10')) {
            if (!$loaded_entity->get('field_txex_text_list_10')->isEmpty()) {
            $paragraph_item_box_layout = $loaded_entity->get('field_txex_text_list_10')->first()->getValue();
            $paragraph_item_box_layout_value = $paragraph_item_box_layout['value'];
            $paragraph_modifiers = $paragraph_modifiers + array($paragraph_item_box_layout_value => $paragraph_item_box_layout_value);
          }
        }
      }

      $variables['paragraph_base_class'] = $paragraph_layout_type_value;
    }
  }

  if ($current_paragraph->hasField('field_txex_boolean_01')) {
    if (!$current_paragraph->get('field_txex_boolean_01')->isEmpty()) {
      $paragraph_reverse_order = $current_paragraph->get('field_txex_boolean_01')->first()->getValue();
      if ($paragraph_reverse_order['value']) {
        $paragraph_modifiers = $paragraph_modifiers + array('reverse-order' => 'reverse-order');
      }
    }
  }

  $variables['paragraph_modifiers'] = $paragraph_modifiers;

}


/**
 * Implements hook_preprocess_HOOK().
 *
 * Pass block region value to content so this can be used in
 * MYTHEME_theme_suggestions_menu_alter.
 */
function d8_theme_main_preprocess_block(&$variables) {
  if ("system_menu_block:txex-account" == $variables['plugin_id']) {
    $variables['#cache']['contexts'][] = 'user';
  }

  if (isset($variables['elements']['#id'])) {
    $region = \Drupal\block\Entity\Block::load($variables['elements']['#id'])->getRegion();
    $variables['content']['#attributes']['region'] = $region;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function d8_theme_main_preprocess_user(&$variables) {
  $user_id = $variables['user']->id();
  $variables['user_edit_link'] = Url::fromRoute('entity.user.edit_form', ['user' => $user_id], []);

  if ('profile_base_information'=== $variables['elements']['#view_mode']) {
    $name_first = array_key_exists(0, $variables['elements']['field_txex_text_plain_01']) ? $variables['elements']['field_txex_text_plain_01'][0]['#context']['value'] : null;
    $name_middle = array_key_exists(0, $variables['elements']['field_txex_text_plain_03']) ? $variables['elements']['field_txex_text_plain_03'][0]['#context']['value'] : null;
    $name_last = array_key_exists(0, $variables['elements']['field_txex_text_plain_02']) ? $variables['elements']['field_txex_text_plain_02'][0]['#context']['value'] : null;
    $name_suffix = array_key_exists(0, $variables['elements']['field_txex_text_plain_04']) ? $variables['elements']['field_txex_text_plain_04'][0]['#context']['value'] : null;

    $names_array = array($name_first, $name_middle, $name_last, $name_suffix);
    $full_name = implode(' ', array_filter($names_array, function($v){ return $v !== null; }));

    $heading_template = '{% include "@atoms/03-text/01-heading/_heading.twig" %}';
    $full_name_render_array = [
      $build['full_name_render'] = [
        '#type' => 'inline_template',
        '#template' => $heading_template,
        '#context' => [
          'heading_base_class' => 'h4',
          'heading_blockname' => 'wysiwyg',
          'heading_content' => $full_name,
          'heading_level' => 3,
          // attributes need because custom twig function bem.php wants it as
          // an array index in processing
          'attributes' => [],
        ],
      ],
    ];

    $variables['full_name'] = $full_name_render_array;
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide region based menu suggestions.
 */
function d8_theme_main_theme_suggestions_menu_alter(&$suggestions, array $variables) {
  if (isset($variables['attributes']['region'])) {
    $menu_name = strtr($variables['menu_name'], '-', '_');
    $suggestions[] = 'menu__' . $menu_name . '__' . $variables['attributes']['region'];
  }
}

function d8_theme_main_preprocess_node__article__full(&$variables) {
  $current_node = $variables['elements']['#node'];

  $created_date = $current_node->getCreatedTime();
  $formatted_created_date = date('F j, Y',$created_date);

  if (!$current_node->field_txex_ref_content_01->isEmpty() && !$current_node->field_txex_ref_content_01->entity->title->isEmpty()) {
    $author_field_title = $current_node->field_txex_ref_content_01->entity->title->value;
  } else {
    $author_field_title = NULL;
  }

  if (!$current_node->field_txex_ref_tax_term_01->isEmpty() && !$current_node->field_txex_ref_tax_term_01->entity->name->isEmpty()) {
    $article_type_name = $current_node->field_txex_ref_tax_term_01->entity->name->value;
    $article_type_parent_path = "/" . $current_node->field_txex_ref_tax_term_01->entity->field_txex_text_formatted_path->value;
  } else {
    $article_type_name = NULL;
    $article_type_parent_path = NULL;
  }

  $variables['created_date'] = $formatted_created_date;
  $variables['author_field_title'] = $author_field_title;
  $variables['article_type_name'] = $article_type_name;
  $variables['article_type_parent_path'] = $article_type_parent_path;
}

function d8_theme_main_preprocess_node__event__full(&$variables) {

  $current_node = $variables['elements']['#node'];
  $current_view_mode = $variables['elements']['#view_mode'];

  // couldn't figure out how to alter the <time> tag in the default date field formatter
  // suggestions alter is hard because it is just a render array so...
  // we build a new render array for a <time> element

  $date_start = $current_node->field_txex_date_01->view($current_view_mode);
  $time_start = $current_node->field_txex_time_01->view($current_view_mode);
  $formatted_date_start_text = $date_start[0]['#text'];
  $formatted_time_start_text = $time_start[0]['#markup'];
  // lower case am/pm with periods per TXEX style guid (https://regex101.com/)
  $formatted_time_start_text = preg_replace('/(?i)(?<= |^)am(?= |$)/', 'a.m.', $formatted_time_start_text);
  $formatted_time_start_text = preg_replace('/(?i)(?<= |^)pm(?= |$)/', 'p.m.', $formatted_time_start_text);

  // getting values for date and time field to use in the datetime attribute for the <time> element
  $date_start_value = $current_node->field_txex_date_01->value;
  $time_start_seconds = $current_node->field_txex_time_01->value;
  // format change from seconds to 00:00:00 for datetime attribute
  $time_start_time = gmdate("H:i:s", $time_start_seconds);
  // see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time or
  // https://www.w3.org/TR/html5-author/the-time-element.html#attr-time-datetime
  $combined_start_date_time = $date_start_value . "T" . $time_start_time;
  $drupal_date_time_start = new \Drupal\Core\Datetime\DrupalDateTime($combined_start_date_time);

  $variables['date_time_start'] = [
    '#type' => 'html_tag',
    '#tag' => 'time',
    '#attributes' => [
      'datetime' => $combined_start_date_time,
    ],
    '#value' => $formatted_date_start_text . ", " . $formatted_time_start_text,
  ];

  $date_end = $current_node->field_txex_date_02->view($current_view_mode);
  $time_end = $current_node->field_txex_time_02->view($current_view_mode);
  $formatted_date_end_text = $date_end[0]['#text'];
  $formatted_time_end_text = $time_end[0]['#markup'];
  // lower case am/pm with periods per TXEX style guid (https://regex101.com/)
  $formatted_time_end_text = preg_replace('/(?i)(?<= |^)am(?= |$)/', 'a.m.', $formatted_time_end_text);
  $formatted_time_end_text = preg_replace('/(?i)(?<= |^)pm(?= |$)/', 'p.m.', $formatted_time_end_text);

  // getting values for date and time field to use in the datetime attribute for the <time> element
  $date_end_value = $current_node->field_txex_date_02->value;
  $time_end_seconds = $current_node->field_txex_time_02->value;
  // format change from seconds to 00:00:00 for datetime attribute
  $time_end_time = gmdate("H:i:s", $time_end_seconds);
  // see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time or
  // https://www.w3.org/TR/html5-author/the-time-element.html#attr-time-datetime
  $combined_end_date_time = $date_end_value . "T" . $time_end_time;
  $drupal_date_time_end = new \Drupal\Core\Datetime\DrupalDateTime($combined_end_date_time);

  $variables['date_time_end'] = [
    '#type' => 'html_tag',
    '#tag' => 'time',
    '#attributes' => [
      'datetime' => $combined_end_date_time,
    ],
    '#value' => $formatted_date_end_text . ", " . $formatted_time_end_text,
  ];

  $combined_start_date_time_end_time = $date_start_value . "T" . $time_end_time;
  $variables['date_start_time_end'] = [
    '#type' => 'html_tag',
    '#tag' => 'time',
    '#attributes' => [
      'datetime' => $combined_start_date_time_end_time,
    ],
    '#value' => $formatted_time_end_text,
  ];

  if ($current_node->field_txex_date_01->value === $current_node->field_txex_date_02->value) {
    $variables['start_end_date_equal'] = TRUE;
  } else {
    $variables['start_end_date_equal'] = FALSE;
  }

}

function d8_theme_main_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->current_display;
}

function d8_theme_main_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id();
    $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id() . '__' . $variables['view']->current_display;
}

function d8_theme_main_theme_suggestions_views_view_fields_alter(array &$suggestions, array $variables) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id();
    $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id() . '__' . $variables['view']->current_display;
}

function d8_theme_main_theme_suggestions_views_view_field_alter(array &$suggestions, array $variables) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id();
    $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id() . '__' . $variables['view']->current_display;
}

function d8_theme_main_preprocess_views_view(&$variables) {
  $view_id = $variables['id'];
  $display_id = $variables['display_id'];

  if ('txex_events' === $view_id && 'attachment_2' === $display_id) {
    if (isset($variables['header']['area_text_custom'])) {
      if ($variables['header']['area_text_custom']['#markup']) {
        $variables['header']['area_text_custom']['#markup'] = '<h3 class="block__h3 block__h3--alt-7">Other Association Events</h3>';
      }
    }
  }

  if ('txex_events' === $view_id && 'block_2' === $display_id) {
    if (isset($variables['header']['area_text_custom'])) {
      if ($variables['header']['area_text_custom']['#markup']) {
        $variables['header']['area_text_custom']['#markup'] = '<h3 class="block__h3 block__h3--alt-7">Next Event</h3>';
      }
    }
  }

  if ('txex_articles' === $view_id) {
    if (array_key_exists('more', $variables)) {
      $variables['more']['#options']['attributes']['class'] = ['flexbox__link',];
    }
  }
}

function d8_theme_main_preprocess_views_view__txex_articles__block_2(&$variables) {
  $icon_template = '{% include "@atoms/04-images/icons/_icon.twig" %}';
  $icon_render_array = [
    '#type' => 'inline_template',
    '#template' => $icon_template,
    '#context' => [
      'icon_name' => 'news-box-logo',
      'icon_modifiers' => [
        'news',
      ],
      'attributes' => [],
    ],
  ];

  $link_template = '{% include "@atoms/01-links/link/link.twig" %}';
  $link_render_array = [
    $build['link_render'] = [
      '#type' => 'inline_template',
      '#template' => $link_template,
      '#context' => [
        'link_content' => $icon_render_array,
        'link_url' => "/scholarships/news",
        'attributes' => [],
      ],
    ],
  ];

  $variables['news_icon_link'] = $link_render_array;
}
