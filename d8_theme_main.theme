<?php

/**
 * @file
 * Functions to support theming in the Texas Exes Main theme.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_preprocess_HOOK().
 */
function d8_theme_main_preprocess_responsive_image_formatter(&$variables) {
  // Storing img_blockname in attributes so that I can pass it on.
  if (isset($variables['item'])) {
    $itemParent = $variables['item']->getParent();
    $fieldName = $itemParent->getName();
    $fieldNameBundle = $itemParent->getFieldDefinition()->getType();
    $variables['responsive_image']['#attributes']['field_info']['field_name'] = $fieldName;
    $variables['responsive_image']['#attributes']['field_info']['field_name_bundle'] = $fieldNameBundle;

    $fieldParent = $variables['item']->getEntity();
    $fieldParentBundle = $fieldParent->bundle();

    $fieldParentBundleType = $fieldParent->getEntityTypeId();
    $variables['responsive_image']['#attributes']['field_info']['field_parent_bundle'] = $fieldParentBundle;
    $variables['responsive_image']['#attributes']['field_info']['field_parent_bundle_type'] = $fieldParentBundleType;
  }

  if (isset($variables['url'])) {
    $variables['responsive_image']['#attributes']['img_blockname'] = "link";
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function d8_theme_main_preprocess_responsive_image(&$variables) {
  // Fixes bug where style_name is never set.
  if (isset($variables['responsive_image_style_id'])) {
    $variables['img_element']['#style_name'] = $variables['responsive_image_style_id'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function d8_theme_main_preprocess_image(&$variables) {
  // Retrieving img_blockname from attributes so that it can be used in the
  // BEM class, then unsetting it so it doesn't display as an attribute.
  if (isset($variables['attributes']['img_blockname'])) {
    $variables['img_blockname'] = implode($variables['attributes']['img_blockname']);
    unset($variables['attributes']['img_blockname']);
  }

  if (isset($variables['attributes']['field_info'])) {
    unset($variables['attributes']['field_info']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function d8_theme_main_preprocess_page(&$variables) {
  $route_args = explode('.', \Drupal::routeMatch()->getRouteName());

  foreach ($route_args as $key => $arg) {
    $arg = str_replace([
      "/",
      "\\",
      "\0",
      '_',
    ], [
      '',
      '',
      '',
      '-',
    ],
    $arg);
    $route_args[$key] = $arg;
  }

  $route_based_class = $variables['theme_hook_original'] . '--' . implode('--', $route_args);
  $variables['attributes']['class'][] = $route_based_class;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function d8_theme_main_theme_suggestions_responsive_image_formatter_alter(array &$suggestions, array $variables) {

  $itemParent = $variables['item']->getParent();

  $fieldName = $itemParent->getName();
  $fieldNameBundle = $itemParent->getFieldDefinition()->getType();
  $fieldParent = $variables['item']->getEntity();
  $fieldParentBundle = $fieldParent->bundle();
  $fieldParentBundleType = $fieldParent->getEntityTypeId();

  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType);
  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldParentBundle);
  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldName);
  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldName . "__" . $fieldParentBundle);
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function d8_theme_main_theme_suggestions_image_alter(array &$suggestions, array $variables) {
  $fieldParentBundle = NULL;
  $fieldParentBundleType = NULL;
  $fieldName = NULL;
  $fieldNameBundle = NULL;

  if (isset($variables['attributes']['field_info']['field_parent_bundle'])) {
    $fieldParentBundle = $variables['attributes']['field_info']['field_parent_bundle'];
  }

  if (isset($variables['attributes']['field_info']['field_parent_bundle_type'])) {
    $fieldParentBundleType = $variables['attributes']['field_info']['field_parent_bundle_type'];
  }

  if (isset($variables['attributes']['field_info']['field_name'])) {
    $fieldName = $variables['attributes']['field_info']['field_name'];
  }

  if (isset($variables['attributes']['field_info']['field_name_bundle'])) {
    $fieldNameBundle = $variables['attributes']['field_info']['field_name_bundle'];
  }

  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType);
  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldParentBundle);
  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldName);
  array_push($suggestions, $variables['theme_hook_original'] . "__" . $fieldParentBundleType . "__" . $fieldName . "__" . $fieldParentBundle);
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function d8_theme_main_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  $sanitized_view_mode = strtr($element['#view_mode'], '.', '_');

  array_push($suggestions, 'field__' . $element['#entity_type'] . '__' . $element['#field_name'] . '__' . $sanitized_view_mode);
  array_push($suggestions, 'field__' . $element['#entity_type'] . '__' . $element['#field_name'] . '__' . $element['#bundle'] . '__' . $sanitized_view_mode);
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function d8_theme_main_theme_suggestions_taxonomy_term_alter(array &$suggestions, &$variables) {
  $element = $variables['elements'];
  $sanitized_view_mode = strtr($element['#view_mode'], '.', '_');

  array_push($suggestions, $variables['theme_hook_original'] . '__' . $element['name']['#bundle'] . '__'  . $sanitized_view_mode);
}


/**
 * Implements hook_form_alter().
 */
function d8_theme_main_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Adding theme suggestions to forms and form submit items.
  $form_id = str_replace('-', '_', $form['#id']);
  foreach (Element::children($form) as $child_group) {
    $form[$child_group]['#attributes']['data-twig-suggestion'] = $form_id;
    foreach (Element::children($form[$child_group]) as $child) {
      $form[$child_group][$child]['#attributes']['data-twig-suggestion'] = $form_id;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function d8_theme_main_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Convert the very specific #id to underscores only for use in suggestion.
  $form_id = str_replace('-', '_', $form['#id']);
  $form['actions']['submit']['#attributes']['data-twig-suggestion'] = $form_id;
  foreach (Element::children($form) as $child) {
    $form[$child]['#attributes']['data-twig-suggestion'] = $form_id;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function d8_theme_main_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  unset($form['name']['#attributes']['placeholder']);
  unset($form['pass']['#attributes']['placeholder']);

  $custom_template = '{% include "@molecules/social-auth/custom-social-auth-block.twig" %}';
  $form['custom_social_auth'] = [
    '#type' => 'inline_template',
    '#template' => $custom_template,
    '#context' => [
      // Attributes need because custom twig function bem.php wants it as
      // an array index in processing.
      'attributes' => [],
    ],
    '#weight' => 100,
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function d8_theme_main_form_user_pass_alter(&$form, FormStateInterface $form_state, $form_id) {
  unset($form['name']['#attributes']['placeholder']);
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function d8_theme_main_theme_suggestions_form_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  $form_id = str_replace('-', '_', $element['#form_id']);
  // Machine name of form.
  $suggestions[] = $variables['theme_hook_original'] . "__" . $form_id;

  // Checks if the form_id isn't specific enough -- for example with form for a
  // views exposed form.
  $alternate_form_id = str_replace('-', '_', $element['#id']);
  if ($form_id != $alternate_form_id) {
    $suggestions[] = $variables['theme_hook_original'] . "__" . $alternate_form_id;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function d8_theme_main_theme_suggestions_form_element_alter(array &$suggestions, array $variables, $hook) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = $variables['theme_hook_original'] . "__" . $element['#type'];
    $suggestions[] = $variables['theme_hook_original'] . "__" . $element['#attributes']['data-twig-suggestion'];
    $suggestions[] = $variables['theme_hook_original'] . "__" . $element['#type'] . '__' . $element['#attributes']['data-twig-suggestion'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function d8_theme_main_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = $variables['theme_hook_original'] . "__" . $element['#attributes']['data-twig-suggestion'];
  }
}

// haven't figured out how to pass data-twig-suggestion to this one yet
// function d8_theme_main_theme_suggestions_form_element_label_alter(&$suggestions, array $variables) {
//   $element = $variables['element'];
//   if (isset($element['#attributes']['data-twig-suggestion'])) {
//     $suggestions[] = $variables['theme_hook_original'] . "__" . $element['#type'];
//     $suggestions[] = $variables['theme_hook_original'] . "__" . $element['#attributes']['data-twig-suggestion'];
//     $suggestions[] = $variables['theme_hook_original'] . "__" . $element['#type'] . '__' . $element['#attributes']['data-twig-suggestion'];
//   }
// }
// ******************

/**
 * Implements hook_theme_registry_alter().
 */
function d8_theme_main_theme_registry_alter(&$theme_registry) {
  $theme_registry['menu']['variables']['top_parent'] = "TEST";
}

/**
 * Implements hook_preprocess_HOOK().
 */
function d8_theme_main_preprocess_field(&$variables) {
  $element = $variables['element'];
  // Get the value of the field.
  $field_layout_type_value = NULL;
  $field_modifiers = NULL;
  $parent_entity = $element['#object'];

  if ($parent_entity->hasField('field_txex_ref_content_01')) {
    if (!$parent_entity->get('field_txex_ref_content_01')->isEmpty()) {

      $reference_field = $parent_entity->get('field_txex_ref_content_01')->first();
      $referenced_entity = $reference_field->getValue();
      $loaded_entity = \Drupal\node\Entity\Node::load($referenced_entity['target_id']);
      if (isset($loaded_entity)) {
        if ($loaded_entity->hasField('field_txex_text_list_08')) {
          if (!$loaded_entity->get('field_txex_text_list_08')->isEmpty()) {
            $field_layout_type = $loaded_entity->get('field_txex_text_list_08')->first()->getValue();
            $field_layout_type_value = $field_layout_type['value'];
          }
        }

        $field_modifiers = [];

        if ($loaded_entity->hasField('field_txex_text_list_07')) {
          if (!$loaded_entity->get('field_txex_text_list_07')->isEmpty()) {
            $field_text_type = $loaded_entity->get('field_txex_text_list_07')->first()->getValue();
            $field_text_type_value = $field_text_type['value'];
            $field_modifiers = $field_modifiers + [$field_text_type_value => $field_text_type_value];
          }
        }
      }

      $variables['field_blockname'] = $field_layout_type_value;
      $variables['field_modifiers'] = $field_modifiers;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function d8_theme_main_preprocess_paragraph(&$variables) {
  $current_paragraph = $variables['elements']['#paragraph'];
  $paragraph_modifiers = [];

  if (!empty($current_paragraph->field_txex_ref_content_01)) {
    $reference_field = $current_paragraph->get('field_txex_ref_content_01')->first();

    if ($reference_field) {
      $paragraph_layout_type_value = "";

      $referenced_entity = $reference_field->getValue();
      $loaded_entity = \Drupal\node\Entity\Node::load($referenced_entity['target_id']);

      if (isset($loaded_entity)) {
        if ($loaded_entity->hasField('field_txex_text_list_02')) {
          if (!$loaded_entity->get('field_txex_text_list_02')->isEmpty()) {
            $paragraph_layout_type = $loaded_entity->get('field_txex_text_list_02')->first()->getValue();
            $paragraph_layout_type_value = $paragraph_layout_type['value'];
          }
        }

        if ($loaded_entity->hasField('field_txex_text_list_03')) {
          if (!$loaded_entity->get('field_txex_text_list_03')->isEmpty()) {
            $paragraph_box_layout = $loaded_entity->get('field_txex_text_list_03')->first()->getValue();
            $paragraph_box_layout_value = $paragraph_box_layout['value'];
            $paragraph_modifiers = $paragraph_modifiers + [$paragraph_box_layout_value => $paragraph_box_layout_value];
          }
        }

        if ($loaded_entity->hasField('field_txex_text_list_04')) {
          if (!$loaded_entity->get('field_txex_text_list_04')->isEmpty()) {
            $paragraph_background = $loaded_entity->get('field_txex_text_list_04')->first()->getValue();
            $paragraph_background_value = $paragraph_background['value'];
            $paragraph_modifiers = $paragraph_modifiers + [$paragraph_background_value => $paragraph_background_value];
          }
        }

        if ($loaded_entity->hasField('field_txex_text_list_05')) {
          if (!$loaded_entity->get('field_txex_text_list_05')->isEmpty()) {
            $paragraph_layout_orientation = $loaded_entity->get('field_txex_text_list_05')->first()->getValue();
            $paragraph_layout_orientation_value = $paragraph_layout_orientation['value'];
            $paragraph_modifiers = $paragraph_modifiers + [$paragraph_layout_orientation_value => $paragraph_layout_orientation_value];
          }
        }

        if ($loaded_entity->hasField('field_txex_text_list_06')) {
          if (!$loaded_entity->get('field_txex_text_list_06')->isEmpty()) {
            $paragraph_layout_width = $loaded_entity->get('field_txex_text_list_06')->first()->getValue();
            $paragraph_layout_width_value = $paragraph_layout_width['value'];
            $paragraph_modifiers = $paragraph_modifiers + [$paragraph_layout_width_value => $paragraph_layout_width_value];
          }
        }

        if ($loaded_entity->hasField('field_txex_text_list_09')) {
          if (!$loaded_entity->get('field_txex_text_list_09')->isEmpty()) {
            $paragraph_item_box_layout = $loaded_entity->get('field_txex_text_list_09')->first()->getValue();
            $paragraph_item_box_layout_value = $paragraph_item_box_layout['value'];
            $paragraph_modifiers = $paragraph_modifiers + [$paragraph_item_box_layout_value => $paragraph_item_box_layout_value];
          }
        }

        if ($loaded_entity->hasField('field_txex_text_list_10')) {
          if (!$loaded_entity->get('field_txex_text_list_10')->isEmpty()) {
            $paragraph_item_box_layout = $loaded_entity->get('field_txex_text_list_10')->first()->getValue();
            $paragraph_item_box_layout_value = $paragraph_item_box_layout['value'];
            $paragraph_modifiers = $paragraph_modifiers + [$paragraph_item_box_layout_value => $paragraph_item_box_layout_value];
          }
        }
      }

      $variables['paragraph_base_class'] = $paragraph_layout_type_value;
    }
  }

  if ($current_paragraph->hasField('field_txex_boolean_01')) {
    if (!$current_paragraph->get('field_txex_boolean_01')->isEmpty()) {
      $paragraph_reverse_order = $current_paragraph->get('field_txex_boolean_01')->first()->getValue();
      if ($paragraph_reverse_order['value']) {
        $paragraph_modifiers = $paragraph_modifiers + ['reverse-order' => 'reverse-order'];
      }
    }
  }
  $variables['paragraph_modifiers'] = $paragraph_modifiers;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Pass block region value to content so this can be used in
 * MYTHEME_theme_suggestions_menu_alter.
 */
function d8_theme_main_preprocess_block(&$variables) {
  if ("system_menu_block:txex-account" == $variables['plugin_id']) {
    $variables['#cache']['contexts'][] = 'user';
  }

  if (isset($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    if ($block) {
      $region = $block->getRegion();
      $variables['content']['#attributes']['region'] = $region;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function d8_theme_main_preprocess_user(&$variables) {
  $view_mode = $variables['elements']['#view_mode'];
  $user = $variables['user'];
  $variables['user_edit_link'] = array_key_exists('#user_edit_link', $variables['elements']) ? $variables['elements']['#user_edit_link'] : null;
  $variables['manage_membership_link'] = array_key_exists('#manage_membership_link', $variables['elements']) ? $variables['elements']['#manage_membership_link'] : null;

  switch ($view_mode) {
    case 'full':
      $link_with_wrapper = [
        '#type' => 'html_tag',
        '#tag' => 'span',
        'child' => $variables['user_edit_link'],
        '#attributes' => [
          'class' => 'txex-update-link',
        ],
        '#prefix' => t('Profile'),
      ];

      $heading_template = '{% include "@atoms/03-text/01-heading/_heading.twig" %}';
      $block_title_render_array = [
        $build['block_title_render'] = [
          '#type' => 'inline_template',
          '#template' => $heading_template,
          '#context' => [
            'heading_base_class' => 'h2',
            'heading_blockname' => 'wysiwyg',
            'heading_content' => $link_with_wrapper,
            'heading_level' => 2,
            // Attributes needed because custom twig function bem.php wants it
            // as an array index in processing.
            'attributes' => [],
          ],
        ],
      ];

      $variables['first_block_title'] = $block_title_render_array;
      break;
  }

  $name_first = $user->field_txex_text_plain_01->isEmpty() ? NULL : $user->field_txex_text_plain_01->value;
  $name_middle = $user->field_txex_text_plain_03->isEmpty() ? NULL : $user->field_txex_text_plain_03->value;
  $name_last = $user->field_txex_text_plain_02->isEmpty() ? NULL : $user->field_txex_text_plain_02->value;
  $name_suffix = $user->field_txex_text_plain_04->isEmpty() ? NULL : $user->field_txex_text_plain_04->value;

  $names_array = [$name_first, $name_middle, $name_last, $name_suffix];
  $full_name = implode(' ', array_filter($names_array, function ($v) {return $v !== NULL; }));

  $heading_template = '{% include "@atoms/03-text/01-heading/_heading.twig" %}';
  $full_name_render_array = [
    $build['full_name_render'] = [
      '#type' => 'inline_template',
      '#template' => $heading_template,
      '#context' => [
        'heading_base_class' => 'h4',
        'heading_blockname' => 'wysiwyg',
        'heading_content' => $full_name,
        'heading_level' => 3,
        // Attributes need because custom twig function bem.php wants it as
        // an array index in processing.
        'attributes' => [],
      ],
    ],
  ];
  $variables['full_name'] = $full_name;
  $variables['full_name_render_array'] = $full_name_render_array;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide region based menu suggestions.
 */
function d8_theme_main_theme_suggestions_menu_alter(&$suggestions, array $variables) {
  if (isset($variables['attributes']['region'])) {
    $menu_name = strtr($variables['menu_name'], '-', '_');
    $suggestions[] = 'menu__' . $menu_name . '__' . $variables['attributes']['region'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function d8_theme_main_preprocess_node__article__full(&$variables) {
  $current_node = $variables['elements']['#node'];

  $created_date = $current_node->getCreatedTime();
  $formatted_created_date = date('F j, Y', $created_date);

  if (!$current_node->field_txex_ref_content_01->isEmpty() && !$current_node->field_txex_ref_content_01->entity->title->isEmpty()) {
    $author_field_title = $current_node->field_txex_ref_content_01->entity->title->value;
  }
  else {
    $author_field_title = NULL;
  }

  if (!$current_node->field_txex_ref_tax_term_01->isEmpty() && !$current_node->field_txex_ref_tax_term_01->entity->name->isEmpty()) {
    $article_type_name = $current_node->field_txex_ref_tax_term_01->entity->name->value;
    $article_type_parent_path = "/" . $current_node->field_txex_ref_tax_term_01->entity->field_txex_text_formatted_path->value;
  }
  else {
    $article_type_name = NULL;
    $article_type_parent_path = NULL;
  }

  $variables['created_date'] = $formatted_created_date;
  $variables['author_field_title'] = $author_field_title;
  $variables['article_type_name'] = $article_type_name;
  $variables['article_type_parent_path'] = $article_type_parent_path;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function d8_theme_main_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id();
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id() . '__' . $variables['view']->current_display;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function d8_theme_main_theme_suggestions_views_view_grouping_alter(array &$suggestions, array $variables) {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id();
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id() . '__' . $variables['view']->current_display;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function d8_theme_main_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id();
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id() . '__' . $variables['view']->current_display;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function d8_theme_main_theme_suggestions_views_view_grid_alter(array &$suggestions, array $variables) {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id();
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id() . '__' . $variables['view']->current_display;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function d8_theme_main_theme_suggestions_views_view_fields_alter(array &$suggestions, array $variables) {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id();
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id() . '__' . $variables['view']->current_display;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function d8_theme_main_theme_suggestions_views_view_field_alter(array &$suggestions, array $variables) {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id();
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id() . '__' . $variables['view']->current_display;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function d8_theme_main_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#type'] === 'view') {
    $pieces = [
      $variables['element']['#type'],
      $variables['element']['#name'],
      $variables['element']['#display_id'],
    ];
    $suggestions[] = $variables['theme_hook_original'] . '__' . implode('__', $pieces);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function d8_theme_main_preprocess_views_view(&$variables) {
  $view_id = $variables['id'];
  $display_id = $variables['display_id'];

  if ('txex_events' === $view_id && 'attachment_2' === $display_id) {
    if (isset($variables['header']['area_text_custom'])) {
      if ($variables['header']['area_text_custom']['#markup']) {
        $variables['header']['area_text_custom']['#markup'] = '<h3 class="block__h3 block__h3--alt-7">Other Association Events</h3>';
      }
    }
  }

  if ('txex_events' === $view_id && 'block_2' === $display_id) {
    if (isset($variables['header']['area_text_custom'])) {
      if ($variables['header']['area_text_custom']['#markup']) {
        $variables['header']['area_text_custom']['#markup'] = '<h3 class="block__h3 block__h3--alt-7">Next Event</h3>';
      }
    }
  }

  if ('txex_articles' === $view_id || 'txex_events' === $view_id) {
    if (array_key_exists('more', $variables)) {
      $variables['more']['#options']['attributes']['class'] = ['flexbox__link'];
    }
  }

  if ('groups' === $view_id && 'page_1' === $display_id) {
    foreach ($variables['attachment_before'] as &$view_attachment) {
      $view_attachment['#display_title'] = $view_attachment['#view']->getTitle();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function d8_theme_main_preprocess_views_view__txex_articles__block_2(&$variables) {
  $icon_template = '{% include "@atoms/04-images/icons/_icon.twig" %}';
  $icon_render_array = [
    '#type' => 'inline_template',
    '#template' => $icon_template,
    '#context' => [
      'icon_name' => 'news-box-logo',
      'icon_modifiers' => [
        'news',
      ],
      'attributes' => [],
    ],
  ];

  $link_template = '{% include "@atoms/01-links/link/link.twig" %}';
  $link_render_array = [
    $build['link_render'] = [
      '#type' => 'inline_template',
      '#template' => $link_template,
      '#context' => [
        'link_content' => $icon_render_array,
        'link_url' => "/scholarships/news",
        'attributes' => [],
      ],
    ],
  ];

  $variables['news_icon_link'] = $link_render_array;
}
