{"version":3,"sources":["02-molecules/accordion/accordion.js"],"names":["parseInt","outerHeight","parent","siblings","addClass","removeClass","children","toggleClass","each","find","css","top","hasClass","first","window","Math","max","apply","map","get","clearTimeout","setTimeout","outerWidth","click","preventDefault","offset","scrollTop","animate","resize","jQuery","Drupal"],"mappings":"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","file":"accordion.js","sourcesContent":["(($, Drupal) => {\n  // const dom = $(document);\n  const win = $(window);\n  const accordionItemTabs = $(\".accordion__item.tabs\");\n  const accordionContentTabs = $(\".accordion__content.tabs\");\n  const accordionHeadingTabs = $(\".accordion__heading.tabs\");\n  const accordionItem = $(\".accordion__item\");\n  const accordionHeading = $(\".accordion__heading\");\n  // const accordionContent = $(\".accordion__content\");\n  const accordionExpandIcon = $(\".accordion__icon--expand\");\n  // const activeClass = \"js-active\";\n  // const hiddenClass = \"js-hidden\";\n  const openClass = \"js-open\";\n  const closedClass = \"js-closed\";\n  const tabsClass = \"tabs\";\n  const breakpoint = 900;\n\n  // const toolbarAdministration = null;\n  // const toolbarTrayHorizontal = null;\n  // const toolbarOffset = null;\n  let headerWrapperScrollUp = null;\n  let headerWrapper = null;\n  let headerWrapperOffset = null;\n  let additionalOffset = 0;\n  let bodyFixedAdminBar = null;\n  let bodyFixedAdminHorizontalTray = null;\n  let bodyFixedAdminBarHeight = 0;\n\n  const maxHeight = elements =>\n    Math.max.apply(\n      null,\n      elements\n        // eslint-disable-next-line func-names\n        .map(function() {\n          return $(this).outerHeight();\n        })\n        .get()\n    );\n\n  // WaitForFinalEvent Function\n  // This function allow us to only perform re-calculations AFTER an event has copmleted.\n  // Below, we'll use it to recalculate values only after the window has been resized, instead of recalculating every pixel change.\n  // Usage:\n  // $(window).resize(function () {\n  //   waitForFinalEvent(function(){\n  //     alert('Resize...');\n  //     //...\n  //   }, 500, \"some unique string\");\n  // });\n  const waitForFinalEvent = (() => {\n    const timers = {};\n    return (callback, ms, uniqueId) => {\n      if (!uniqueId) {\n        uniqueId = \"Don't call this twice without a uniqueId\";\n      }\n      if (timers[uniqueId]) {\n        clearTimeout(timers[uniqueId]);\n      }\n      // callbackParameter is available in the callback function.\n      timers[uniqueId] = setTimeout(callback, ms);\n    };\n  })();\n\n  // Calculate body padding top (to accommodate the admin menu)\n  function calculateBodyFixedAdminBarHeight() {\n    bodyFixedAdminBar = $(\"body.toolbar-fixed #toolbar-bar\");\n    bodyFixedAdminHorizontalTray = $(\n      \"body.toolbar-fixed.toolbar-tray-open.toolbar-horizontal #toolbar-item-administration-tray\"\n    );\n    bodyFixedAdminBarHeight =\n      (parseInt(bodyFixedAdminBar.outerHeight(), 10) || 0) +\n      (parseInt(bodyFixedAdminHorizontalTray.outerHeight(), 10) || 0);\n  }\n\n  function closeAllOtherAccordionElements(element) {\n    // Close all other elements but self.\n    $(element)\n      .parent()\n      .siblings()\n      .addClass(closedClass)\n      .removeClass(openClass);\n    $(element)\n      .parent()\n      .siblings()\n      .children()\n      .addClass(closedClass)\n      .removeClass(openClass);\n    $(element)\n      .parent()\n      .siblings()\n      .children()\n      .children()\n      .addClass(closedClass)\n      .removeClass(openClass);\n  }\n\n  function closeAllAccordionElements() {\n    $(accordionItem)\n      .addClass(closedClass)\n      .removeClass(openClass);\n    $(accordionItem)\n      .children()\n      .addClass(closedClass)\n      .removeClass(openClass);\n    $(accordionItem)\n      .children()\n      .children()\n      .addClass(closedClass)\n      .removeClass(openClass);\n  }\n\n  function openAccordionElement(element) {\n    $(element)\n      .parent()\n      .addClass(openClass)\n      .removeClass(closedClass);\n    $(element)\n      .parent()\n      .children()\n      .addClass(openClass)\n      .removeClass(closedClass);\n    $(element)\n      .parent()\n      .children()\n      .children()\n      .addClass(openClass)\n      .removeClass(closedClass);\n  }\n\n  function toggleAccordionElement(element) {\n    $(element)\n      .parent()\n      .toggleClass(openClass)\n      .toggleClass(closedClass);\n    $(element)\n      .parent()\n      .children()\n      .toggleClass(openClass)\n      .toggleClass(closedClass);\n    $(element)\n      .parent()\n      .children()\n      .children()\n      .toggleClass(openClass)\n      .toggleClass(closedClass);\n  }\n\n  function positionAccordionIcon() {\n    accordionItem.each((index, element) => {\n      const headingHeight = maxHeight($(element).find(accordionHeading));\n      const iconHeight = maxHeight($(element).find(accordionExpandIcon));\n      const accordionTopOffset =\n        parseInt(headingHeight, 10) / 2 - parseInt(iconHeight, 10) / 2;\n\n      $(element)\n        .find(accordionExpandIcon)\n        .css({ top: accordionTopOffset });\n    });\n  }\n\n  function setAccordionTabsHeights() {\n    const maxTabsHeadingHeight = maxHeight(accordionHeadingTabs);\n    const maxTabsContentHeight = maxHeight(accordionContentTabs);\n    const maxTabHeight = maxTabsHeadingHeight + maxTabsContentHeight;\n\n    accordionItemTabs.outerHeight(maxTabHeight);\n    // Add extra pixel to make header overlap content and override its bottom\n    // border.\n    accordionHeadingTabs.outerHeight(parseInt(maxTabsHeadingHeight, 10) + 1);\n    accordionContentTabs.css({ top: maxTabsHeadingHeight });\n  }\n\n  function initializeAccordionTabs(currentWinWidth) {\n    if (currentWinWidth > breakpoint) {\n      setAccordionTabsHeights();\n    }\n    // If current width great than breakpoint and no accordion item is open.\n    if (currentWinWidth > breakpoint && !$(accordionItem).hasClass(openClass)) {\n      // Initialize first tab as open.\n      openAccordionElement(accordionHeadingTabs.first());\n    }\n  }\n\n  // Hide content via js so that if js is disabled, all of the content is visible\n  // @TODO this works with un-tabbed accordion, but nee to make this work with\n  // tabs -- by preventing tabs and displaying a fully open accordion?\n  closeAllAccordionElements();\n\n  let winW = parseInt(win.outerWidth(), 10);\n\n  positionAccordionIcon();\n  initializeAccordionTabs(winW);\n\n  // eslint-disable-next-line func-names\n  accordionHeading.click(function(e) {\n    e.preventDefault();\n\n    // Close all other elements but self.\n    closeAllOtherAccordionElements(this);\n\n    // When accordion uses tabs display and window is wider than breakpoint.\n    // Keep in mind that tabs styles are only applied when wider than breakpoint\n    // in scss files.\n    if ($(this).hasClass(tabsClass) && winW > breakpoint) {\n      // Click does not toggle, just sets to open.\n      openAccordionElement(this);\n      // This is default accordion behavior (no tabs display).\n    } else {\n      // Click toggles element open/closed.\n      toggleAccordionElement(this);\n\n      if (winW <= breakpoint) {\n        // Handle scroll behavior offset in relation to scroll-hide mobile menu bar.\n        headerWrapper = $(\".header-wrapper\");\n        headerWrapperScrollUp = $(\".header-wrapper .scrollUp\");\n        headerWrapperOffset =\n          (parseInt(headerWrapper.outerHeight(), 10) || 0) -\n          (parseInt(headerWrapperScrollUp.outerHeight(), 10) || 0);\n\n        if ($(this).offset().top < win.scrollTop() + headerWrapperOffset) {\n          additionalOffset = headerWrapperOffset;\n        }\n      }\n\n      calculateBodyFixedAdminBarHeight();\n      additionalOffset += bodyFixedAdminBarHeight;\n\n      // Scroll behavior when an accordion item is clicked.\n      $(\"html,body\").animate(\n        {\n          scrollTop: $(this).offset().top - additionalOffset\n        },\n        500\n      );\n      // Re-Initialize scroll additional offset for next click.\n      additionalOffset = 0;\n    }\n  });\n\n  // Update everything when the window is resized\n  win.resize(winW, () => {\n    waitForFinalEvent(\n      () => {\n        // Clear any manually set css and height.\n        accordionItemTabs.outerHeight(\"\");\n        accordionHeadingTabs.outerHeight(\"\");\n        accordionContentTabs.css({ top: \"\" });\n\n        const winWafter = parseInt(win.outerWidth(), 10);\n\n        positionAccordionIcon();\n        initializeAccordionTabs(winWafter);\n\n        // Reset for the next resize.\n        winW = parseInt(win.outerWidth(), 10);\n      },\n      200,\n      \"Accordion - window resize\"\n    );\n  });\n})(jQuery, Drupal);\n"]}